/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Amenity, BeddingSetup, IExposedProperty, RatePlan, RoomType, Variation } from "./models/property";
import { AddAdultsAndChildrenEvent } from "./components/ir-booking-engine/ir-booking-page/ir-adult-child-counter/ir-adult-child-counter";
import { TSource } from "./stores/app.store";
import { Booking } from "./models/booking.dto";
import { CheckoutErrors, ICurrency, IExposedLanguages, pages } from "./models/common";
import { TIcons } from "./components/ui/ir-icons/icons";
import { IDateModifiers } from "./components/ui/ir-date-range/ir-date-range.types";
import { Locale } from "date-fns";
import { TCarouselSlides } from "./components/ui/ir-carousel/carousel";
import { ZodIssue } from "zod";
import { Placement } from "@popperjs/core";
import { IRatePlanSelection } from "./stores/booking";
import { TAuthNavigation } from "./components/ir-booking-engine/ir-nav/ir-auth/auth.types";
import { TSignInAuthTrigger, TSignUpAuthTrigger } from "./validators/auth.validator";
import { TGuest } from "./models/user_form";
import { TContainerStyle } from "./components/ir-booking-widget/types";
export { Amenity, BeddingSetup, IExposedProperty, RatePlan, RoomType, Variation } from "./models/property";
export { AddAdultsAndChildrenEvent } from "./components/ir-booking-engine/ir-booking-page/ir-adult-child-counter/ir-adult-child-counter";
export { TSource } from "./stores/app.store";
export { Booking } from "./models/booking.dto";
export { CheckoutErrors, ICurrency, IExposedLanguages, pages } from "./models/common";
export { TIcons } from "./components/ui/ir-icons/icons";
export { IDateModifiers } from "./components/ui/ir-date-range/ir-date-range.types";
export { Locale } from "date-fns";
export { TCarouselSlides } from "./components/ui/ir-carousel/carousel";
export { ZodIssue } from "zod";
export { Placement } from "@popperjs/core";
export { IRatePlanSelection } from "./stores/booking";
export { TAuthNavigation } from "./components/ir-booking-engine/ir-nav/ir-auth/auth.types";
export { TSignInAuthTrigger, TSignUpAuthTrigger } from "./validators/auth.validator";
export { TGuest } from "./models/user_form";
export { TContainerStyle } from "./components/ir-booking-widget/types";
export namespace Components {
    interface IrAccomodations {
        "amenities": Amenity[];
        "bookingAttributes": {
    max_occupancy: number;
    bedding_setup: BeddingSetup[];
  };
    }
    interface IrAdultChildCounter {
        "adultCount": number;
        "baseChildrenAges": string[];
        "childMaxAge": number;
        "childrenCount": number;
        "error": boolean;
        "infant_nbr": number;
        "maxAdultCount": number;
        "maxChildrenCount": number;
        "minAdultCount": number;
        "minChildrenCount": number;
        "open": () => Promise<void>;
    }
    interface IrAlertDialog {
        "closeModal": () => Promise<void>;
        "openModal": () => Promise<void>;
    }
    interface IrAuth {
        "enableSignUp": boolean;
    }
    interface IrAvailabilityHeader {
        "adultCount": string;
        "ages": string;
        "childrenCount": string;
        "fromDate": string;
        "toDate": string;
    }
    interface IrBadge {
        "backgroundShown": boolean;
        "label": string;
        "size": 'sm' | 'md' | 'lg';
        "variant": 'default' | 'error' | 'pending' | 'success';
        "withDot": '';
    }
    interface IrBadgeGroup {
        "badge": string;
        "clickable": boolean;
        "message": string;
        "messagePosition": 'default' | 'center';
        "variant": 'error' | 'succes' | 'primary' | 'secondary';
    }
    interface IrBanner {
    }
    interface IrBe {
        "adults": string;
        "aff": string;
        "agent_code": string;
        "ages": string;
        "checkin": string;
        "checkout": string;
        "child": string;
        "coupon": string;
        "cur": string;
        "hideGoogleSignIn": boolean;
        "injected": boolean;
        "language": string;
        "loyalty": boolean;
        "origin": string | null;
        "p": string;
        "perma_link": string;
        "property": IExposedProperty | null;
        "propertyId": number;
        "rp_id": number;
        "rt_id": number;
        "source": TSource | null;
        "stag": string | null;
    }
    interface IrBookingCancellation {
        "booking": Booking;
        "openDialog": () => Promise<void>;
        "property_id": number;
    }
    interface IrBookingCard {
        "aff": boolean;
        "booking": Booking;
    }
    interface IrBookingCode {
        "clearAgent": () => Promise<void>;
    }
    interface IrBookingDetails {
        "errors": string;
    }
    interface IrBookingDetailsView {
        "booking": Booking | null;
    }
    interface IrBookingHeader {
        "activeLink": 'single_booking' | 'all_booking';
        "bookingNumber": number | null;
        "mode": 'single' | 'multi';
    }
    interface IrBookingListing {
        "aName": string;
        "aff": string;
        "baseUrl": string;
        "be": boolean;
        "footerShown": boolean;
        "headerShown": boolean;
        "hideGoogleSignIn": boolean;
        "language": string;
        "maxPages": number;
        "perma_link": string;
        "propertyid": number;
        "showAllBookings": boolean;
        "startScreen": { screen: 'bookings' | 'booking-details'; params: unknown };
        "version": string;
    }
    interface IrBookingOverview {
        "aff": boolean;
        "be": boolean;
        "language": string;
        "maxPages": number;
        "propertyid": number;
        "showAllBookings": boolean;
    }
    interface IrBookingPage {
        "adultCount": string;
        "ages": string;
        "childrenCount": string;
        "fromDate": string;
        "toDate": string;
    }
    interface IrBookingSummary {
        "error": CheckoutErrors;
        "isBookingConfirmed": boolean;
        "prepaymentAmount": any;
    }
    interface IrButton {
        "buttonClassName": string;
        "buttonId": string;
        "buttonStyles": Partial<CSSStyleDeclaration>;
        "disabled": boolean;
        "haveLeftIcon": boolean;
        "haveRightIcon": boolean;
        "iconHeight": number;
        "iconName": TIcons;
        "iconWidth": number;
        "isLoading": boolean;
        "label": string;
        "name": string;
        "removeIconClassName": boolean;
        "size": 'sm' | 'md' | 'lg' | 'pill';
        "svgClassName": string;
        "type": 'button' | 'submit' | 'reset' | 'menu';
        "variants": 'default' | 'outline' | 'secondary' | 'destructive' | 'ghost' | 'link' | 'icon' | 'ghost-primary' | 'outline-primary' | 'icon-primary';
    }
    interface IrCalendar {
        "date": Date;
        "dateModifiers": IDateModifiers;
        "fromDate": Date | null;
        "locale": Locale;
        "maxDate": Date;
        "maxSpanDays": number;
        "minDate": Date;
        "showPrice": boolean;
        "toDate": Date | null;
    }
    interface IrCarousel {
        "activeIndex": number;
        "carouselClasses": string;
        "enableCarouselSwipe": boolean;
        "slides": TCarouselSlides[];
        "styles": Partial<CSSStyleDeclaration>;
    }
    interface IrCheckbox {
        "checkboxId": string;
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "name": string;
    }
    interface IrCheckoutPage {
    }
    interface IrCheckoutSkeleton {
    }
    interface IrCouponDialog {
    }
    interface IrCreditCardInput {
        "value": string;
    }
    interface IrDatePopup {
        "dates": { start: Date | null; end: Date | null };
    }
    interface IrDateRange {
        "dateModifiers": IDateModifiers;
        "fromDate": Date | null;
        "locale": Locale;
        "maxDate": Date;
        "maxSpanDays": number;
        "minDate": Date;
        "showPrice": boolean;
        "toDate": Date | null;
    }
    interface IrDialog {
        "closeButton": boolean;
        "closeModal": () => Promise<void>;
        "openModal": () => Promise<void>;
    }
    interface IrDrawer {
        "contained": boolean;
        "hide": () => Promise<void>;
        "label": string;
        "noHeader": boolean;
        "open": boolean;
        "placement": 'top' | 'right' | 'bottom' | 'left';
        "show": () => Promise<void>;
    }
    interface IrFacilities {
    }
    interface IrFooter {
        "version": string;
    }
    interface IrGallery {
        "carouselClasses": string;
        "carouselStyles": Partial<CSSStyleDeclaration>;
        "disableCarouselClick": boolean;
        "enableCarouselSwipe": boolean;
        "images": { url: string; alt: string }[];
        "maxLength": number;
        "totalImages": number;
    }
    interface IrGoogleMaps {
    }
    interface IrGuestCounter {
        "adults": number;
        "child": number;
        "childMaxAge": number;
        "error": boolean;
        "maxAdultCount": number;
        "maxChildrenCount": number;
        "minAdultCount": number;
        "minChildrenCount": number;
    }
    interface IrHomeLoader {
    }
    interface IrIcons {
        "height": number;
        "name": TIcons;
        "removeClassName": boolean;
        "svgClassName": string;
        "width": number;
    }
    interface IrInput {
        "autocomplete": string;
        "autofocus": boolean;
        "class": string;
        "disabled": boolean;
        "error": boolean;
        "inputId": string;
        "inputStyles": Partial<CSSStyleDeclaration>;
        "inputid": string;
        "label": string;
        "labelBackground": string;
        "leftIcon": boolean;
        "mask": Record<string, unknown>;
        "max": string | number;
        "maxlength": number;
        "min": string | number;
        "mode": 'double-line' | 'default';
        "multiple": boolean;
        "name": string;
        "pattern": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "rightIcon": boolean;
        "size": number;
        "step": string | number;
        "tooltip": string;
        "type": | 'button'
    | 'checkbox'
    | 'color'
    | 'date'
    | 'datetime-local'
    | 'email'
    | 'file'
    | 'hidden'
    | 'image'
    | 'month'
    | 'number'
    | 'password'
    | 'radio'
    | 'range'
    | 'reset'
    | 'search'
    | 'submit'
    | 'tel'
    | 'text'
    | 'time'
    | 'url'
    | 'week';
        "value": string;
    }
    interface IrInterceptor {
        "handledEndpoints": any[];
    }
    interface IrInvoice {
        "aName": string;
        "baseUrl": string;
        "be": boolean;
        "bookingNbr": string;
        "email": string;
        "footerShown": boolean;
        "headerMessageShown": boolean;
        "headerShown": boolean;
        "isConfermation": boolean;
        "language": string;
        "locationShown": boolean;
        "perma_link": string;
        "propertyId": number;
        "status": 0 | 1;
        "version": string;
    }
    interface IrLanguagePicker {
        "currencies": ICurrency[];
        "languages": IExposedLanguages[];
    }
    interface IrLoyalty {
    }
    interface IrMenu {
        "data": IItems[];
        "menuItem": string;
    }
    interface IrModal {
        "closeModal": () => Promise<void>;
        "element": HTMLElement;
        "openModal": () => Promise<void>;
    }
    interface IrNav {
        "currencies": ICurrency[];
        "isBookingListing": boolean;
        "languages": IExposedLanguages[];
        "logo": string;
        "logoOnly": boolean;
        "menuShown": boolean;
        "showBookingCode": boolean;
        "showCurrency": boolean;
        "website": string;
    }
    interface IrPagination {
        "current": number;
        "minPageShown": number;
        "total": number;
    }
    interface IrPaymentView {
        "errors": Record<string, ZodIssue>;
        "prepaymentAmount": number;
    }
    interface IrPhoneInput {
        "country_code": number;
        "country_phone_prefix": string;
        "error": boolean;
        "mobile_number": string;
        "mode": 'prefix_only' | 'country_code_and_prefix';
    }
    interface IrPickup {
        "errors": Record<string, ZodIssue>;
    }
    interface IrPopover {
        "active": boolean;
        "allowFlip": boolean;
        "autoAdjust": boolean;
        "forceClose": () => Promise<void>;
        "outsideEvents": 'all' | 'none';
        "placement": Placement;
        "showCloseButton": boolean;
        "stopListeningForOutsideClicks": boolean;
        "toggleVisibility": () => Promise<CustomEvent<boolean>>;
        "trigger_label": string;
    }
    interface IrPortal {
        "offset": number;
        "reference": HTMLElement;
        "updatePosition": () => Promise<void>;
    }
    interface IrPrivacyPolicy {
        "closeModal": () => Promise<void>;
        "hideTrigger": boolean;
        "label": string;
        "openModal": () => Promise<void>;
        "policyTriggerStyle": Partial<CSSStyleDeclaration>;
    }
    interface IrPropertyGallery {
        "display": 'grid' | 'default';
        "property_state": 'carousel' | 'gallery';
        "roomType": RoomType;
    }
    interface IrQuickAuth {
    }
    interface IrRadio {
        "checked": boolean;
        "radioId": string;
    }
    interface IrRateplan {
        "display": 'grid' | 'default';
        "ratePlan": RatePlan;
        "roomTypeId": number;
        "roomTypeInventory": number;
        "visibleInventory"?: | IRatePlanSelection
    | {
        reserved: number;
        visibleInventory?: number;
        selected_variation: Variation;
      };
    }
    interface IrRoomTypeAmenities {
        "aminities": Amenity[];
        "roomType": RoomType;
    }
    interface IrRoomtype {
        "display": 'grid' | 'default';
        "roomtype": RoomType;
    }
    interface IrSelect {
        "addDummyOption": boolean;
        "containerStyle": string;
        "customStyles": string;
        "data": { id: string | number; value: string; disabled?: boolean; html?: boolean }[];
        "icon": boolean;
        "label": string;
        "select_id": string;
        "value": string | number;
        "variant": 'double-line' | 'default';
    }
    interface IrSheet {
        "closeSheet": () => Promise<void>;
        "hideCloseButton": boolean;
        "open": boolean;
        "openSheet": () => Promise<void>;
    }
    interface IrSignin {
        "enableSignUp": boolean;
    }
    interface IrSignup {
    }
    interface IrSkeleton {
        "customClasses": string;
        "styles": {
    [className: string]: boolean;
  };
    }
    interface IrSocialButton {
        "label": string;
    }
    interface IrSwitch {
        "checked": boolean;
        "disabled": boolean;
        "switchId": string;
    }
    interface IrTextarea {
        "autocomplete": string;
        "autofocus": boolean;
        "class": string;
        "disabled": boolean;
        "error": boolean;
        "inputId": string;
        "inputid": string;
        "label": string;
        "leftIcon": boolean;
        "max": string | number;
        "maxlength": number;
        "min": string | number;
        "multiple": boolean;
        "name": string;
        "pattern": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "size": number;
        "step": string | number;
        "value": string;
    }
    interface IrTooltip {
        "label": string;
        "labelColors": 'default' | 'green' | 'red';
        "message": string;
        "open_behavior": 'hover' | 'click';
        "withHtml": boolean;
    }
    interface IrUserAvatar {
    }
    interface IrUserForm {
        "errors": Record<string, ZodIssue>;
    }
    interface IrUserProfile {
        "be": boolean;
        "user_data": TGuest;
    }
    interface IrWidget {
        "aff": string;
        "contentContainerStyle": TContainerStyle;
        "delay": number;
        "language": string;
        "p": string;
        "perma_link": string;
        "position": 'fixed' | 'block';
        "propertyId": number;
        "roomTypeId": string | null;
    }
}
export interface IrAdultChildCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAdultChildCounterElement;
}
export interface IrAlertDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAlertDialogElement;
}
export interface IrAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAuthElement;
}
export interface IrAvailabilityHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAvailabilityHeaderElement;
}
export interface IrBadgeGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBadgeGroupElement;
}
export interface IrBookingCancellationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingCancellationElement;
}
export interface IrBookingCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingCardElement;
}
export interface IrBookingCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingCodeElement;
}
export interface IrBookingDetailsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingDetailsElement;
}
export interface IrBookingDetailsViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingDetailsViewElement;
}
export interface IrBookingHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingHeaderElement;
}
export interface IrBookingOverviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingOverviewElement;
}
export interface IrBookingPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingPageElement;
}
export interface IrBookingSummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingSummaryElement;
}
export interface IrButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrButtonElement;
}
export interface IrCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCalendarElement;
}
export interface IrCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCarouselElement;
}
export interface IrCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckboxElement;
}
export interface IrCheckoutPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckoutPageElement;
}
export interface IrCouponDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCouponDialogElement;
}
export interface IrCreditCardInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCreditCardInputElement;
}
export interface IrDatePopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDatePopupElement;
}
export interface IrDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDateRangeElement;
}
export interface IrDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDialogElement;
}
export interface IrDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDrawerElement;
}
export interface IrFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrFooterElement;
}
export interface IrGalleryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrGalleryElement;
}
export interface IrGuestCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrGuestCounterElement;
}
export interface IrInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrInputElement;
}
export interface IrLanguagePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrLanguagePickerElement;
}
export interface IrLoyaltyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrLoyaltyElement;
}
export interface IrMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrMenuElement;
}
export interface IrModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrModalElement;
}
export interface IrNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrNavElement;
}
export interface IrPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPaginationElement;
}
export interface IrPhoneInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPhoneInputElement;
}
export interface IrPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPopoverElement;
}
export interface IrRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrRadioElement;
}
export interface IrRateplanCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrRateplanElement;
}
export interface IrSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSelectElement;
}
export interface IrSheetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSheetElement;
}
export interface IrSigninCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSigninElement;
}
export interface IrSignupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSignupElement;
}
export interface IrSocialButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSocialButtonElement;
}
export interface IrSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSwitchElement;
}
export interface IrTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrTextareaElement;
}
export interface IrTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrTooltipElement;
}
export interface IrUserFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrUserFormElement;
}
declare global {
    interface HTMLIrAccomodationsElement extends Components.IrAccomodations, HTMLStencilElement {
    }
    var HTMLIrAccomodationsElement: {
        prototype: HTMLIrAccomodationsElement;
        new (): HTMLIrAccomodationsElement;
    };
    interface HTMLIrAdultChildCounterElementEventMap {
        "addAdultsAndChildren": AddAdultsAndChildrenEvent;
        "checkAvailability": null;
    }
    interface HTMLIrAdultChildCounterElement extends Components.IrAdultChildCounter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAdultChildCounterElementEventMap>(type: K, listener: (this: HTMLIrAdultChildCounterElement, ev: IrAdultChildCounterCustomEvent<HTMLIrAdultChildCounterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAdultChildCounterElementEventMap>(type: K, listener: (this: HTMLIrAdultChildCounterElement, ev: IrAdultChildCounterCustomEvent<HTMLIrAdultChildCounterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAdultChildCounterElement: {
        prototype: HTMLIrAdultChildCounterElement;
        new (): HTMLIrAdultChildCounterElement;
    };
    interface HTMLIrAlertDialogElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrAlertDialogElement extends Components.IrAlertDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAlertDialogElementEventMap>(type: K, listener: (this: HTMLIrAlertDialogElement, ev: IrAlertDialogCustomEvent<HTMLIrAlertDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAlertDialogElementEventMap>(type: K, listener: (this: HTMLIrAlertDialogElement, ev: IrAlertDialogCustomEvent<HTMLIrAlertDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAlertDialogElement: {
        prototype: HTMLIrAlertDialogElement;
        new (): HTMLIrAlertDialogElement;
    };
    interface HTMLIrAuthElementEventMap {
        "closeDialog": null;
    }
    interface HTMLIrAuthElement extends Components.IrAuth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAuthElementEventMap>(type: K, listener: (this: HTMLIrAuthElement, ev: IrAuthCustomEvent<HTMLIrAuthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAuthElementEventMap>(type: K, listener: (this: HTMLIrAuthElement, ev: IrAuthCustomEvent<HTMLIrAuthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAuthElement: {
        prototype: HTMLIrAuthElement;
        new (): HTMLIrAuthElement;
    };
    interface HTMLIrAvailabilityHeaderElementEventMap {
        "resetBooking": null;
        "scrollToRoomType": null;
    }
    interface HTMLIrAvailabilityHeaderElement extends Components.IrAvailabilityHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAvailabilityHeaderElementEventMap>(type: K, listener: (this: HTMLIrAvailabilityHeaderElement, ev: IrAvailabilityHeaderCustomEvent<HTMLIrAvailabilityHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAvailabilityHeaderElementEventMap>(type: K, listener: (this: HTMLIrAvailabilityHeaderElement, ev: IrAvailabilityHeaderCustomEvent<HTMLIrAvailabilityHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAvailabilityHeaderElement: {
        prototype: HTMLIrAvailabilityHeaderElement;
        new (): HTMLIrAvailabilityHeaderElement;
    };
    interface HTMLIrBadgeElement extends Components.IrBadge, HTMLStencilElement {
    }
    var HTMLIrBadgeElement: {
        prototype: HTMLIrBadgeElement;
        new (): HTMLIrBadgeElement;
    };
    interface HTMLIrBadgeGroupElementEventMap {
        "badgeClick": MouseEvent;
    }
    interface HTMLIrBadgeGroupElement extends Components.IrBadgeGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBadgeGroupElementEventMap>(type: K, listener: (this: HTMLIrBadgeGroupElement, ev: IrBadgeGroupCustomEvent<HTMLIrBadgeGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBadgeGroupElementEventMap>(type: K, listener: (this: HTMLIrBadgeGroupElement, ev: IrBadgeGroupCustomEvent<HTMLIrBadgeGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBadgeGroupElement: {
        prototype: HTMLIrBadgeGroupElement;
        new (): HTMLIrBadgeGroupElement;
    };
    interface HTMLIrBannerElement extends Components.IrBanner, HTMLStencilElement {
    }
    var HTMLIrBannerElement: {
        prototype: HTMLIrBannerElement;
        new (): HTMLIrBannerElement;
    };
    interface HTMLIrBeElement extends Components.IrBe, HTMLStencilElement {
    }
    var HTMLIrBeElement: {
        prototype: HTMLIrBeElement;
        new (): HTMLIrBeElement;
    };
    interface HTMLIrBookingCancellationElementEventMap {
        "openChange": boolean;
        "cancellationResult": { state: 'failed' | 'success'; booking_nbr: string };
    }
    interface HTMLIrBookingCancellationElement extends Components.IrBookingCancellation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingCancellationElementEventMap>(type: K, listener: (this: HTMLIrBookingCancellationElement, ev: IrBookingCancellationCustomEvent<HTMLIrBookingCancellationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingCancellationElementEventMap>(type: K, listener: (this: HTMLIrBookingCancellationElement, ev: IrBookingCancellationCustomEvent<HTMLIrBookingCancellationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingCancellationElement: {
        prototype: HTMLIrBookingCancellationElement;
        new (): HTMLIrBookingCancellationElement;
    };
    interface HTMLIrBookingCardElementEventMap {
        "optionClicked": { tag: string; id: number };
    }
    interface HTMLIrBookingCardElement extends Components.IrBookingCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingCardElementEventMap>(type: K, listener: (this: HTMLIrBookingCardElement, ev: IrBookingCardCustomEvent<HTMLIrBookingCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingCardElementEventMap>(type: K, listener: (this: HTMLIrBookingCardElement, ev: IrBookingCardCustomEvent<HTMLIrBookingCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingCardElement: {
        prototype: HTMLIrBookingCardElement;
        new (): HTMLIrBookingCardElement;
    };
    interface HTMLIrBookingCodeElementEventMap {
        "closeDialog": null;
        "resetBooking": string;
    }
    interface HTMLIrBookingCodeElement extends Components.IrBookingCode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingCodeElementEventMap>(type: K, listener: (this: HTMLIrBookingCodeElement, ev: IrBookingCodeCustomEvent<HTMLIrBookingCodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingCodeElementEventMap>(type: K, listener: (this: HTMLIrBookingCodeElement, ev: IrBookingCodeCustomEvent<HTMLIrBookingCodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingCodeElement: {
        prototype: HTMLIrBookingCodeElement;
        new (): HTMLIrBookingCodeElement;
    };
    interface HTMLIrBookingDetailsElementEventMap {
        "prepaymentChange": number;
    }
    interface HTMLIrBookingDetailsElement extends Components.IrBookingDetails, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingDetailsElementEventMap>(type: K, listener: (this: HTMLIrBookingDetailsElement, ev: IrBookingDetailsCustomEvent<HTMLIrBookingDetailsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingDetailsElementEventMap>(type: K, listener: (this: HTMLIrBookingDetailsElement, ev: IrBookingDetailsCustomEvent<HTMLIrBookingDetailsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingDetailsElement: {
        prototype: HTMLIrBookingDetailsElement;
        new (): HTMLIrBookingDetailsElement;
    };
    interface HTMLIrBookingDetailsViewElementEventMap {
        "bl_routing": {
    route: 'booking' | 'booking-details';
    params?: unknown;
  };
    }
    interface HTMLIrBookingDetailsViewElement extends Components.IrBookingDetailsView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingDetailsViewElementEventMap>(type: K, listener: (this: HTMLIrBookingDetailsViewElement, ev: IrBookingDetailsViewCustomEvent<HTMLIrBookingDetailsViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingDetailsViewElementEventMap>(type: K, listener: (this: HTMLIrBookingDetailsViewElement, ev: IrBookingDetailsViewCustomEvent<HTMLIrBookingDetailsViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingDetailsViewElement: {
        prototype: HTMLIrBookingDetailsViewElement;
        new (): HTMLIrBookingDetailsViewElement;
    };
    interface HTMLIrBookingHeaderElementEventMap {
        "linkChanged": 'single_booking' | 'all_booking';
    }
    interface HTMLIrBookingHeaderElement extends Components.IrBookingHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingHeaderElementEventMap>(type: K, listener: (this: HTMLIrBookingHeaderElement, ev: IrBookingHeaderCustomEvent<HTMLIrBookingHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingHeaderElementEventMap>(type: K, listener: (this: HTMLIrBookingHeaderElement, ev: IrBookingHeaderCustomEvent<HTMLIrBookingHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingHeaderElement: {
        prototype: HTMLIrBookingHeaderElement;
        new (): HTMLIrBookingHeaderElement;
    };
    interface HTMLIrBookingListingElement extends Components.IrBookingListing, HTMLStencilElement {
    }
    var HTMLIrBookingListingElement: {
        prototype: HTMLIrBookingListingElement;
        new (): HTMLIrBookingListingElement;
    };
    interface HTMLIrBookingOverviewElementEventMap {
        "bl_routing": {
    route: 'booking' | 'booking-details';
    params?: unknown;
  };
    }
    interface HTMLIrBookingOverviewElement extends Components.IrBookingOverview, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingOverviewElementEventMap>(type: K, listener: (this: HTMLIrBookingOverviewElement, ev: IrBookingOverviewCustomEvent<HTMLIrBookingOverviewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingOverviewElementEventMap>(type: K, listener: (this: HTMLIrBookingOverviewElement, ev: IrBookingOverviewCustomEvent<HTMLIrBookingOverviewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingOverviewElement: {
        prototype: HTMLIrBookingOverviewElement;
        new (): HTMLIrBookingOverviewElement;
    };
    interface HTMLIrBookingPageElementEventMap {
        "routing": pages;
    }
    interface HTMLIrBookingPageElement extends Components.IrBookingPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingPageElementEventMap>(type: K, listener: (this: HTMLIrBookingPageElement, ev: IrBookingPageCustomEvent<HTMLIrBookingPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingPageElementEventMap>(type: K, listener: (this: HTMLIrBookingPageElement, ev: IrBookingPageCustomEvent<HTMLIrBookingPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingPageElement: {
        prototype: HTMLIrBookingPageElement;
        new (): HTMLIrBookingPageElement;
    };
    interface HTMLIrBookingSummaryElementEventMap {
        "routing": pages;
        "bookingClicked": null;
        "openPrivacyPolicy": null;
    }
    interface HTMLIrBookingSummaryElement extends Components.IrBookingSummary, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingSummaryElementEventMap>(type: K, listener: (this: HTMLIrBookingSummaryElement, ev: IrBookingSummaryCustomEvent<HTMLIrBookingSummaryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingSummaryElementEventMap>(type: K, listener: (this: HTMLIrBookingSummaryElement, ev: IrBookingSummaryCustomEvent<HTMLIrBookingSummaryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingSummaryElement: {
        prototype: HTMLIrBookingSummaryElement;
        new (): HTMLIrBookingSummaryElement;
    };
    interface HTMLIrButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLIrButtonElement extends Components.IrButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrButtonElementEventMap>(type: K, listener: (this: HTMLIrButtonElement, ev: IrButtonCustomEvent<HTMLIrButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrButtonElementEventMap>(type: K, listener: (this: HTMLIrButtonElement, ev: IrButtonCustomEvent<HTMLIrButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrButtonElement: {
        prototype: HTMLIrButtonElement;
        new (): HTMLIrButtonElement;
    };
    interface HTMLIrCalendarElementEventMap {
        "dateChange": Date;
    }
    interface HTMLIrCalendarElement extends Components.IrCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCalendarElementEventMap>(type: K, listener: (this: HTMLIrCalendarElement, ev: IrCalendarCustomEvent<HTMLIrCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCalendarElementEventMap>(type: K, listener: (this: HTMLIrCalendarElement, ev: IrCalendarCustomEvent<HTMLIrCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCalendarElement: {
        prototype: HTMLIrCalendarElement;
        new (): HTMLIrCalendarElement;
    };
    interface HTMLIrCarouselElementEventMap {
        "carouselImageClicked": null;
        "carouselImageIndexChange": number;
    }
    interface HTMLIrCarouselElement extends Components.IrCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCarouselElementEventMap>(type: K, listener: (this: HTMLIrCarouselElement, ev: IrCarouselCustomEvent<HTMLIrCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCarouselElementEventMap>(type: K, listener: (this: HTMLIrCarouselElement, ev: IrCarouselCustomEvent<HTMLIrCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCarouselElement: {
        prototype: HTMLIrCarouselElement;
        new (): HTMLIrCarouselElement;
    };
    interface HTMLIrCheckboxElementEventMap {
        "checkChange": boolean;
    }
    interface HTMLIrCheckboxElement extends Components.IrCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCheckboxElementEventMap>(type: K, listener: (this: HTMLIrCheckboxElement, ev: IrCheckboxCustomEvent<HTMLIrCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCheckboxElementEventMap>(type: K, listener: (this: HTMLIrCheckboxElement, ev: IrCheckboxCustomEvent<HTMLIrCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCheckboxElement: {
        prototype: HTMLIrCheckboxElement;
        new (): HTMLIrCheckboxElement;
    };
    interface HTMLIrCheckoutPageElementEventMap {
        "routing": pages;
    }
    interface HTMLIrCheckoutPageElement extends Components.IrCheckoutPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCheckoutPageElementEventMap>(type: K, listener: (this: HTMLIrCheckoutPageElement, ev: IrCheckoutPageCustomEvent<HTMLIrCheckoutPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCheckoutPageElementEventMap>(type: K, listener: (this: HTMLIrCheckoutPageElement, ev: IrCheckoutPageCustomEvent<HTMLIrCheckoutPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCheckoutPageElement: {
        prototype: HTMLIrCheckoutPageElement;
        new (): HTMLIrCheckoutPageElement;
    };
    interface HTMLIrCheckoutSkeletonElement extends Components.IrCheckoutSkeleton, HTMLStencilElement {
    }
    var HTMLIrCheckoutSkeletonElement: {
        prototype: HTMLIrCheckoutSkeletonElement;
        new (): HTMLIrCheckoutSkeletonElement;
    };
    interface HTMLIrCouponDialogElementEventMap {
        "resetBooking": string;
    }
    interface HTMLIrCouponDialogElement extends Components.IrCouponDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCouponDialogElementEventMap>(type: K, listener: (this: HTMLIrCouponDialogElement, ev: IrCouponDialogCustomEvent<HTMLIrCouponDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCouponDialogElementEventMap>(type: K, listener: (this: HTMLIrCouponDialogElement, ev: IrCouponDialogCustomEvent<HTMLIrCouponDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCouponDialogElement: {
        prototype: HTMLIrCouponDialogElement;
        new (): HTMLIrCouponDialogElement;
    };
    interface HTMLIrCreditCardInputElementEventMap {
        "creditCardChange": { value: string; cardType: '' | 'AMEX' | 'VISA' | 'Mastercard' };
    }
    interface HTMLIrCreditCardInputElement extends Components.IrCreditCardInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCreditCardInputElementEventMap>(type: K, listener: (this: HTMLIrCreditCardInputElement, ev: IrCreditCardInputCustomEvent<HTMLIrCreditCardInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCreditCardInputElementEventMap>(type: K, listener: (this: HTMLIrCreditCardInputElement, ev: IrCreditCardInputCustomEvent<HTMLIrCreditCardInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCreditCardInputElement: {
        prototype: HTMLIrCreditCardInputElement;
        new (): HTMLIrCreditCardInputElement;
    };
    interface HTMLIrDatePopupElementEventMap {
        "dateChange": { start: Date | null; end: Date | null };
    }
    interface HTMLIrDatePopupElement extends Components.IrDatePopup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDatePopupElementEventMap>(type: K, listener: (this: HTMLIrDatePopupElement, ev: IrDatePopupCustomEvent<HTMLIrDatePopupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDatePopupElementEventMap>(type: K, listener: (this: HTMLIrDatePopupElement, ev: IrDatePopupCustomEvent<HTMLIrDatePopupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDatePopupElement: {
        prototype: HTMLIrDatePopupElement;
        new (): HTMLIrDatePopupElement;
    };
    interface HTMLIrDateRangeElementEventMap {
        "dateChange": { start: Date | null; end: Date | null };
    }
    interface HTMLIrDateRangeElement extends Components.IrDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDateRangeElementEventMap>(type: K, listener: (this: HTMLIrDateRangeElement, ev: IrDateRangeCustomEvent<HTMLIrDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDateRangeElementEventMap>(type: K, listener: (this: HTMLIrDateRangeElement, ev: IrDateRangeCustomEvent<HTMLIrDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDateRangeElement: {
        prototype: HTMLIrDateRangeElement;
        new (): HTMLIrDateRangeElement;
    };
    interface HTMLIrDialogElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrDialogElement extends Components.IrDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDialogElementEventMap>(type: K, listener: (this: HTMLIrDialogElement, ev: IrDialogCustomEvent<HTMLIrDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDialogElementEventMap>(type: K, listener: (this: HTMLIrDialogElement, ev: IrDialogCustomEvent<HTMLIrDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDialogElement: {
        prototype: HTMLIrDialogElement;
        new (): HTMLIrDialogElement;
    };
    interface HTMLIrDrawerElementEventMap {
        "six-drawer-show": null;
        "six-drawer-after-show": null;
        "six-drawer-hide": null;
        "six-drawer-after-hide": null;
        "six-drawer-initial-focus": null;
        "six-drawer-overlay-dismiss": null;
    }
    interface HTMLIrDrawerElement extends Components.IrDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDrawerElementEventMap>(type: K, listener: (this: HTMLIrDrawerElement, ev: IrDrawerCustomEvent<HTMLIrDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDrawerElementEventMap>(type: K, listener: (this: HTMLIrDrawerElement, ev: IrDrawerCustomEvent<HTMLIrDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDrawerElement: {
        prototype: HTMLIrDrawerElement;
        new (): HTMLIrDrawerElement;
    };
    interface HTMLIrFacilitiesElement extends Components.IrFacilities, HTMLStencilElement {
    }
    var HTMLIrFacilitiesElement: {
        prototype: HTMLIrFacilitiesElement;
        new (): HTMLIrFacilitiesElement;
    };
    interface HTMLIrFooterElementEventMap {
        "openPrivacyPolicy": null;
    }
    interface HTMLIrFooterElement extends Components.IrFooter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrFooterElementEventMap>(type: K, listener: (this: HTMLIrFooterElement, ev: IrFooterCustomEvent<HTMLIrFooterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrFooterElementEventMap>(type: K, listener: (this: HTMLIrFooterElement, ev: IrFooterCustomEvent<HTMLIrFooterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrFooterElement: {
        prototype: HTMLIrFooterElement;
        new (): HTMLIrFooterElement;
    };
    interface HTMLIrGalleryElementEventMap {
        "openGallery": number;
    }
    interface HTMLIrGalleryElement extends Components.IrGallery, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrGalleryElementEventMap>(type: K, listener: (this: HTMLIrGalleryElement, ev: IrGalleryCustomEvent<HTMLIrGalleryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrGalleryElementEventMap>(type: K, listener: (this: HTMLIrGalleryElement, ev: IrGalleryCustomEvent<HTMLIrGalleryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrGalleryElement: {
        prototype: HTMLIrGalleryElement;
        new (): HTMLIrGalleryElement;
    };
    interface HTMLIrGoogleMapsElement extends Components.IrGoogleMaps, HTMLStencilElement {
    }
    var HTMLIrGoogleMapsElement: {
        prototype: HTMLIrGoogleMapsElement;
        new (): HTMLIrGoogleMapsElement;
    };
    interface HTMLIrGuestCounterElementEventMap {
        "updateCounts": any;
        "closeGuestCounter": any;
    }
    interface HTMLIrGuestCounterElement extends Components.IrGuestCounter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrGuestCounterElementEventMap>(type: K, listener: (this: HTMLIrGuestCounterElement, ev: IrGuestCounterCustomEvent<HTMLIrGuestCounterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrGuestCounterElementEventMap>(type: K, listener: (this: HTMLIrGuestCounterElement, ev: IrGuestCounterCustomEvent<HTMLIrGuestCounterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrGuestCounterElement: {
        prototype: HTMLIrGuestCounterElement;
        new (): HTMLIrGuestCounterElement;
    };
    interface HTMLIrHomeLoaderElement extends Components.IrHomeLoader, HTMLStencilElement {
    }
    var HTMLIrHomeLoaderElement: {
        prototype: HTMLIrHomeLoaderElement;
        new (): HTMLIrHomeLoaderElement;
    };
    interface HTMLIrIconsElement extends Components.IrIcons, HTMLStencilElement {
    }
    var HTMLIrIconsElement: {
        prototype: HTMLIrIconsElement;
        new (): HTMLIrIconsElement;
    };
    interface HTMLIrInputElementEventMap {
        "textChanged": string;
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
    }
    interface HTMLIrInputElement extends Components.IrInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrInputElementEventMap>(type: K, listener: (this: HTMLIrInputElement, ev: IrInputCustomEvent<HTMLIrInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrInputElementEventMap>(type: K, listener: (this: HTMLIrInputElement, ev: IrInputCustomEvent<HTMLIrInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrInputElement: {
        prototype: HTMLIrInputElement;
        new (): HTMLIrInputElement;
    };
    interface HTMLIrInterceptorElement extends Components.IrInterceptor, HTMLStencilElement {
    }
    var HTMLIrInterceptorElement: {
        prototype: HTMLIrInterceptorElement;
        new (): HTMLIrInterceptorElement;
    };
    interface HTMLIrInvoiceElement extends Components.IrInvoice, HTMLStencilElement {
    }
    var HTMLIrInvoiceElement: {
        prototype: HTMLIrInvoiceElement;
        new (): HTMLIrInvoiceElement;
    };
    interface HTMLIrLanguagePickerElementEventMap {
        "closeDialog": null;
        "resetBooking": null;
        "languageChanged": string;
    }
    interface HTMLIrLanguagePickerElement extends Components.IrLanguagePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrLanguagePickerElementEventMap>(type: K, listener: (this: HTMLIrLanguagePickerElement, ev: IrLanguagePickerCustomEvent<HTMLIrLanguagePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrLanguagePickerElementEventMap>(type: K, listener: (this: HTMLIrLanguagePickerElement, ev: IrLanguagePickerCustomEvent<HTMLIrLanguagePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrLanguagePickerElement: {
        prototype: HTMLIrLanguagePickerElement;
        new (): HTMLIrLanguagePickerElement;
    };
    interface HTMLIrLoyaltyElementEventMap {
        "resetBooking": string;
    }
    interface HTMLIrLoyaltyElement extends Components.IrLoyalty, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrLoyaltyElementEventMap>(type: K, listener: (this: HTMLIrLoyaltyElement, ev: IrLoyaltyCustomEvent<HTMLIrLoyaltyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrLoyaltyElementEventMap>(type: K, listener: (this: HTMLIrLoyaltyElement, ev: IrLoyaltyCustomEvent<HTMLIrLoyaltyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrLoyaltyElement: {
        prototype: HTMLIrLoyaltyElement;
        new (): HTMLIrLoyaltyElement;
    };
    interface HTMLIrMenuElementEventMap {
        "menuItemClick": string | number;
    }
    interface HTMLIrMenuElement extends Components.IrMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrMenuElementEventMap>(type: K, listener: (this: HTMLIrMenuElement, ev: IrMenuCustomEvent<HTMLIrMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrMenuElementEventMap>(type: K, listener: (this: HTMLIrMenuElement, ev: IrMenuCustomEvent<HTMLIrMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrMenuElement: {
        prototype: HTMLIrMenuElement;
        new (): HTMLIrMenuElement;
    };
    interface HTMLIrModalElementEventMap {
        "openChange": boolean;
        "authStatus": {
    state: 'success' | 'failed';
    token: string;
    payload: {
      method: 'direct' | 'google';
      email?: string;
      booking_nbr?: string;
    };
  };
    }
    interface HTMLIrModalElement extends Components.IrModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrModalElementEventMap>(type: K, listener: (this: HTMLIrModalElement, ev: IrModalCustomEvent<HTMLIrModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrModalElementEventMap>(type: K, listener: (this: HTMLIrModalElement, ev: IrModalCustomEvent<HTMLIrModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrModalElement: {
        prototype: HTMLIrModalElement;
        new (): HTMLIrModalElement;
    };
    interface HTMLIrNavElementEventMap {
        "routing": pages;
        "signOut": null;
        "screenChanged": pages;
    }
    interface HTMLIrNavElement extends Components.IrNav, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrNavElementEventMap>(type: K, listener: (this: HTMLIrNavElement, ev: IrNavCustomEvent<HTMLIrNavElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrNavElementEventMap>(type: K, listener: (this: HTMLIrNavElement, ev: IrNavCustomEvent<HTMLIrNavElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrNavElement: {
        prototype: HTMLIrNavElement;
        new (): HTMLIrNavElement;
    };
    interface HTMLIrPaginationElementEventMap {
        "pageChange": number;
    }
    interface HTMLIrPaginationElement extends Components.IrPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrPaginationElementEventMap>(type: K, listener: (this: HTMLIrPaginationElement, ev: IrPaginationCustomEvent<HTMLIrPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrPaginationElementEventMap>(type: K, listener: (this: HTMLIrPaginationElement, ev: IrPaginationCustomEvent<HTMLIrPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrPaginationElement: {
        prototype: HTMLIrPaginationElement;
        new (): HTMLIrPaginationElement;
    };
    interface HTMLIrPaymentViewElement extends Components.IrPaymentView, HTMLStencilElement {
    }
    var HTMLIrPaymentViewElement: {
        prototype: HTMLIrPaymentViewElement;
        new (): HTMLIrPaymentViewElement;
    };
    interface HTMLIrPhoneInputElementEventMap {
        "textChange": { phone_prefix: string; mobile: string };
        "phoneInputBlur": FocusEvent;
        "phoneInputFocus": FocusEvent;
    }
    interface HTMLIrPhoneInputElement extends Components.IrPhoneInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrPhoneInputElementEventMap>(type: K, listener: (this: HTMLIrPhoneInputElement, ev: IrPhoneInputCustomEvent<HTMLIrPhoneInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrPhoneInputElementEventMap>(type: K, listener: (this: HTMLIrPhoneInputElement, ev: IrPhoneInputCustomEvent<HTMLIrPhoneInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrPhoneInputElement: {
        prototype: HTMLIrPhoneInputElement;
        new (): HTMLIrPhoneInputElement;
    };
    interface HTMLIrPickupElement extends Components.IrPickup, HTMLStencilElement {
    }
    var HTMLIrPickupElement: {
        prototype: HTMLIrPickupElement;
        new (): HTMLIrPickupElement;
    };
    interface HTMLIrPopoverElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrPopoverElement extends Components.IrPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrPopoverElementEventMap>(type: K, listener: (this: HTMLIrPopoverElement, ev: IrPopoverCustomEvent<HTMLIrPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrPopoverElementEventMap>(type: K, listener: (this: HTMLIrPopoverElement, ev: IrPopoverCustomEvent<HTMLIrPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrPopoverElement: {
        prototype: HTMLIrPopoverElement;
        new (): HTMLIrPopoverElement;
    };
    interface HTMLIrPortalElement extends Components.IrPortal, HTMLStencilElement {
    }
    var HTMLIrPortalElement: {
        prototype: HTMLIrPortalElement;
        new (): HTMLIrPortalElement;
    };
    interface HTMLIrPrivacyPolicyElement extends Components.IrPrivacyPolicy, HTMLStencilElement {
    }
    var HTMLIrPrivacyPolicyElement: {
        prototype: HTMLIrPrivacyPolicyElement;
        new (): HTMLIrPrivacyPolicyElement;
    };
    interface HTMLIrPropertyGalleryElement extends Components.IrPropertyGallery, HTMLStencilElement {
    }
    var HTMLIrPropertyGalleryElement: {
        prototype: HTMLIrPropertyGalleryElement;
        new (): HTMLIrPropertyGalleryElement;
    };
    interface HTMLIrQuickAuthElement extends Components.IrQuickAuth, HTMLStencilElement {
    }
    var HTMLIrQuickAuthElement: {
        prototype: HTMLIrQuickAuthElement;
        new (): HTMLIrQuickAuthElement;
    };
    interface HTMLIrRadioElementEventMap {
        "checkChange": boolean;
    }
    interface HTMLIrRadioElement extends Components.IrRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrRadioElementEventMap>(type: K, listener: (this: HTMLIrRadioElement, ev: IrRadioCustomEvent<HTMLIrRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrRadioElementEventMap>(type: K, listener: (this: HTMLIrRadioElement, ev: IrRadioCustomEvent<HTMLIrRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrRadioElement: {
        prototype: HTMLIrRadioElement;
        new (): HTMLIrRadioElement;
    };
    interface HTMLIrRateplanElementEventMap {
        "animateBookingButton": null;
    }
    interface HTMLIrRateplanElement extends Components.IrRateplan, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrRateplanElementEventMap>(type: K, listener: (this: HTMLIrRateplanElement, ev: IrRateplanCustomEvent<HTMLIrRateplanElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrRateplanElementEventMap>(type: K, listener: (this: HTMLIrRateplanElement, ev: IrRateplanCustomEvent<HTMLIrRateplanElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrRateplanElement: {
        prototype: HTMLIrRateplanElement;
        new (): HTMLIrRateplanElement;
    };
    interface HTMLIrRoomTypeAmenitiesElement extends Components.IrRoomTypeAmenities, HTMLStencilElement {
    }
    var HTMLIrRoomTypeAmenitiesElement: {
        prototype: HTMLIrRoomTypeAmenitiesElement;
        new (): HTMLIrRoomTypeAmenitiesElement;
    };
    interface HTMLIrRoomtypeElement extends Components.IrRoomtype, HTMLStencilElement {
    }
    var HTMLIrRoomtypeElement: {
        prototype: HTMLIrRoomtypeElement;
        new (): HTMLIrRoomtypeElement;
    };
    interface HTMLIrSelectElementEventMap {
        "valueChange": string | number;
    }
    interface HTMLIrSelectElement extends Components.IrSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSelectElementEventMap>(type: K, listener: (this: HTMLIrSelectElement, ev: IrSelectCustomEvent<HTMLIrSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSelectElementEventMap>(type: K, listener: (this: HTMLIrSelectElement, ev: IrSelectCustomEvent<HTMLIrSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSelectElement: {
        prototype: HTMLIrSelectElement;
        new (): HTMLIrSelectElement;
    };
    interface HTMLIrSheetElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrSheetElement extends Components.IrSheet, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSheetElementEventMap>(type: K, listener: (this: HTMLIrSheetElement, ev: IrSheetCustomEvent<HTMLIrSheetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSheetElementEventMap>(type: K, listener: (this: HTMLIrSheetElement, ev: IrSheetCustomEvent<HTMLIrSheetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSheetElement: {
        prototype: HTMLIrSheetElement;
        new (): HTMLIrSheetElement;
    };
    interface HTMLIrSigninElementEventMap {
        "authFinish": {
    state: 'success' | 'failed';
    token: string;
    payload: {
      method: 'direct' | 'google';
      email?: string;
      booking_nbr?: string;
    };
  };
        "navigate": TAuthNavigation;
        "signIn": TSignInAuthTrigger;
    }
    interface HTMLIrSigninElement extends Components.IrSignin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSigninElementEventMap>(type: K, listener: (this: HTMLIrSigninElement, ev: IrSigninCustomEvent<HTMLIrSigninElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSigninElementEventMap>(type: K, listener: (this: HTMLIrSigninElement, ev: IrSigninCustomEvent<HTMLIrSigninElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSigninElement: {
        prototype: HTMLIrSigninElement;
        new (): HTMLIrSigninElement;
    };
    interface HTMLIrSignupElementEventMap {
        "navigate": TAuthNavigation;
        "signUp": TSignUpAuthTrigger;
    }
    interface HTMLIrSignupElement extends Components.IrSignup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSignupElementEventMap>(type: K, listener: (this: HTMLIrSignupElement, ev: IrSignupCustomEvent<HTMLIrSignupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSignupElementEventMap>(type: K, listener: (this: HTMLIrSignupElement, ev: IrSignupCustomEvent<HTMLIrSignupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSignupElement: {
        prototype: HTMLIrSignupElement;
        new (): HTMLIrSignupElement;
    };
    interface HTMLIrSkeletonElement extends Components.IrSkeleton, HTMLStencilElement {
    }
    var HTMLIrSkeletonElement: {
        prototype: HTMLIrSkeletonElement;
        new (): HTMLIrSkeletonElement;
    };
    interface HTMLIrSocialButtonElementEventMap {
        "socialButtonClick": MouseEvent;
    }
    interface HTMLIrSocialButtonElement extends Components.IrSocialButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSocialButtonElementEventMap>(type: K, listener: (this: HTMLIrSocialButtonElement, ev: IrSocialButtonCustomEvent<HTMLIrSocialButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSocialButtonElementEventMap>(type: K, listener: (this: HTMLIrSocialButtonElement, ev: IrSocialButtonCustomEvent<HTMLIrSocialButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSocialButtonElement: {
        prototype: HTMLIrSocialButtonElement;
        new (): HTMLIrSocialButtonElement;
    };
    interface HTMLIrSwitchElementEventMap {
        "checkChange": boolean;
    }
    interface HTMLIrSwitchElement extends Components.IrSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSwitchElementEventMap>(type: K, listener: (this: HTMLIrSwitchElement, ev: IrSwitchCustomEvent<HTMLIrSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSwitchElementEventMap>(type: K, listener: (this: HTMLIrSwitchElement, ev: IrSwitchCustomEvent<HTMLIrSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSwitchElement: {
        prototype: HTMLIrSwitchElement;
        new (): HTMLIrSwitchElement;
    };
    interface HTMLIrTextareaElementEventMap {
        "textChanged": string;
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
    }
    interface HTMLIrTextareaElement extends Components.IrTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrTextareaElementEventMap>(type: K, listener: (this: HTMLIrTextareaElement, ev: IrTextareaCustomEvent<HTMLIrTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrTextareaElementEventMap>(type: K, listener: (this: HTMLIrTextareaElement, ev: IrTextareaCustomEvent<HTMLIrTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrTextareaElement: {
        prototype: HTMLIrTextareaElement;
        new (): HTMLIrTextareaElement;
    };
    interface HTMLIrTooltipElementEventMap {
        "tooltipOpenChange": boolean;
    }
    interface HTMLIrTooltipElement extends Components.IrTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrTooltipElementEventMap>(type: K, listener: (this: HTMLIrTooltipElement, ev: IrTooltipCustomEvent<HTMLIrTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrTooltipElementEventMap>(type: K, listener: (this: HTMLIrTooltipElement, ev: IrTooltipCustomEvent<HTMLIrTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrTooltipElement: {
        prototype: HTMLIrTooltipElement;
        new (): HTMLIrTooltipElement;
    };
    interface HTMLIrUserAvatarElement extends Components.IrUserAvatar, HTMLStencilElement {
    }
    var HTMLIrUserAvatarElement: {
        prototype: HTMLIrUserAvatarElement;
        new (): HTMLIrUserAvatarElement;
    };
    interface HTMLIrUserFormElementEventMap {
        "changePageLoading": 'remove' | 'add';
    }
    interface HTMLIrUserFormElement extends Components.IrUserForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrUserFormElementEventMap>(type: K, listener: (this: HTMLIrUserFormElement, ev: IrUserFormCustomEvent<HTMLIrUserFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrUserFormElementEventMap>(type: K, listener: (this: HTMLIrUserFormElement, ev: IrUserFormCustomEvent<HTMLIrUserFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrUserFormElement: {
        prototype: HTMLIrUserFormElement;
        new (): HTMLIrUserFormElement;
    };
    interface HTMLIrUserProfileElement extends Components.IrUserProfile, HTMLStencilElement {
    }
    var HTMLIrUserProfileElement: {
        prototype: HTMLIrUserProfileElement;
        new (): HTMLIrUserProfileElement;
    };
    interface HTMLIrWidgetElement extends Components.IrWidget, HTMLStencilElement {
    }
    var HTMLIrWidgetElement: {
        prototype: HTMLIrWidgetElement;
        new (): HTMLIrWidgetElement;
    };
    interface HTMLElementTagNameMap {
        "ir-accomodations": HTMLIrAccomodationsElement;
        "ir-adult-child-counter": HTMLIrAdultChildCounterElement;
        "ir-alert-dialog": HTMLIrAlertDialogElement;
        "ir-auth": HTMLIrAuthElement;
        "ir-availability-header": HTMLIrAvailabilityHeaderElement;
        "ir-badge": HTMLIrBadgeElement;
        "ir-badge-group": HTMLIrBadgeGroupElement;
        "ir-banner": HTMLIrBannerElement;
        "ir-be": HTMLIrBeElement;
        "ir-booking-cancellation": HTMLIrBookingCancellationElement;
        "ir-booking-card": HTMLIrBookingCardElement;
        "ir-booking-code": HTMLIrBookingCodeElement;
        "ir-booking-details": HTMLIrBookingDetailsElement;
        "ir-booking-details-view": HTMLIrBookingDetailsViewElement;
        "ir-booking-header": HTMLIrBookingHeaderElement;
        "ir-booking-listing": HTMLIrBookingListingElement;
        "ir-booking-overview": HTMLIrBookingOverviewElement;
        "ir-booking-page": HTMLIrBookingPageElement;
        "ir-booking-summary": HTMLIrBookingSummaryElement;
        "ir-button": HTMLIrButtonElement;
        "ir-calendar": HTMLIrCalendarElement;
        "ir-carousel": HTMLIrCarouselElement;
        "ir-checkbox": HTMLIrCheckboxElement;
        "ir-checkout-page": HTMLIrCheckoutPageElement;
        "ir-checkout-skeleton": HTMLIrCheckoutSkeletonElement;
        "ir-coupon-dialog": HTMLIrCouponDialogElement;
        "ir-credit-card-input": HTMLIrCreditCardInputElement;
        "ir-date-popup": HTMLIrDatePopupElement;
        "ir-date-range": HTMLIrDateRangeElement;
        "ir-dialog": HTMLIrDialogElement;
        "ir-drawer": HTMLIrDrawerElement;
        "ir-facilities": HTMLIrFacilitiesElement;
        "ir-footer": HTMLIrFooterElement;
        "ir-gallery": HTMLIrGalleryElement;
        "ir-google-maps": HTMLIrGoogleMapsElement;
        "ir-guest-counter": HTMLIrGuestCounterElement;
        "ir-home-loader": HTMLIrHomeLoaderElement;
        "ir-icons": HTMLIrIconsElement;
        "ir-input": HTMLIrInputElement;
        "ir-interceptor": HTMLIrInterceptorElement;
        "ir-invoice": HTMLIrInvoiceElement;
        "ir-language-picker": HTMLIrLanguagePickerElement;
        "ir-loyalty": HTMLIrLoyaltyElement;
        "ir-menu": HTMLIrMenuElement;
        "ir-modal": HTMLIrModalElement;
        "ir-nav": HTMLIrNavElement;
        "ir-pagination": HTMLIrPaginationElement;
        "ir-payment-view": HTMLIrPaymentViewElement;
        "ir-phone-input": HTMLIrPhoneInputElement;
        "ir-pickup": HTMLIrPickupElement;
        "ir-popover": HTMLIrPopoverElement;
        "ir-portal": HTMLIrPortalElement;
        "ir-privacy-policy": HTMLIrPrivacyPolicyElement;
        "ir-property-gallery": HTMLIrPropertyGalleryElement;
        "ir-quick-auth": HTMLIrQuickAuthElement;
        "ir-radio": HTMLIrRadioElement;
        "ir-rateplan": HTMLIrRateplanElement;
        "ir-room-type-amenities": HTMLIrRoomTypeAmenitiesElement;
        "ir-roomtype": HTMLIrRoomtypeElement;
        "ir-select": HTMLIrSelectElement;
        "ir-sheet": HTMLIrSheetElement;
        "ir-signin": HTMLIrSigninElement;
        "ir-signup": HTMLIrSignupElement;
        "ir-skeleton": HTMLIrSkeletonElement;
        "ir-social-button": HTMLIrSocialButtonElement;
        "ir-switch": HTMLIrSwitchElement;
        "ir-textarea": HTMLIrTextareaElement;
        "ir-tooltip": HTMLIrTooltipElement;
        "ir-user-avatar": HTMLIrUserAvatarElement;
        "ir-user-form": HTMLIrUserFormElement;
        "ir-user-profile": HTMLIrUserProfileElement;
        "ir-widget": HTMLIrWidgetElement;
    }
}
declare namespace LocalJSX {
    interface IrAccomodations {
        "amenities"?: Amenity[];
        "bookingAttributes"?: {
    max_occupancy: number;
    bedding_setup: BeddingSetup[];
  };
    }
    interface IrAdultChildCounter {
        "adultCount"?: number;
        "baseChildrenAges"?: string[];
        "childMaxAge"?: number;
        "childrenCount"?: number;
        "error"?: boolean;
        "infant_nbr"?: number;
        "maxAdultCount"?: number;
        "maxChildrenCount"?: number;
        "minAdultCount"?: number;
        "minChildrenCount"?: number;
        "onAddAdultsAndChildren"?: (event: IrAdultChildCounterCustomEvent<AddAdultsAndChildrenEvent>) => void;
        "onCheckAvailability"?: (event: IrAdultChildCounterCustomEvent<null>) => void;
    }
    interface IrAlertDialog {
        "onOpenChange"?: (event: IrAlertDialogCustomEvent<boolean>) => void;
    }
    interface IrAuth {
        "enableSignUp"?: boolean;
        "onCloseDialog"?: (event: IrAuthCustomEvent<null>) => void;
    }
    interface IrAvailabilityHeader {
        "adultCount"?: string;
        "ages"?: string;
        "childrenCount"?: string;
        "fromDate"?: string;
        "onResetBooking"?: (event: IrAvailabilityHeaderCustomEvent<null>) => void;
        "onScrollToRoomType"?: (event: IrAvailabilityHeaderCustomEvent<null>) => void;
        "toDate"?: string;
    }
    interface IrBadge {
        "backgroundShown"?: boolean;
        "label"?: string;
        "size"?: 'sm' | 'md' | 'lg';
        "variant"?: 'default' | 'error' | 'pending' | 'success';
        "withDot"?: '';
    }
    interface IrBadgeGroup {
        "badge"?: string;
        "clickable"?: boolean;
        "message"?: string;
        "messagePosition"?: 'default' | 'center';
        "onBadgeClick"?: (event: IrBadgeGroupCustomEvent<MouseEvent>) => void;
        "variant"?: 'error' | 'succes' | 'primary' | 'secondary';
    }
    interface IrBanner {
    }
    interface IrBe {
        "adults"?: string;
        "aff"?: string;
        "agent_code"?: string;
        "ages"?: string;
        "checkin"?: string;
        "checkout"?: string;
        "child"?: string;
        "coupon"?: string;
        "cur"?: string;
        "hideGoogleSignIn"?: boolean;
        "injected"?: boolean;
        "language"?: string;
        "loyalty"?: boolean;
        "origin"?: string | null;
        "p"?: string;
        "perma_link"?: string;
        "property"?: IExposedProperty | null;
        "propertyId"?: number;
        "rp_id"?: number;
        "rt_id"?: number;
        "source"?: TSource | null;
        "stag"?: string | null;
    }
    interface IrBookingCancellation {
        "booking"?: Booking;
        "onCancellationResult"?: (event: IrBookingCancellationCustomEvent<{ state: 'failed' | 'success'; booking_nbr: string }>) => void;
        "onOpenChange"?: (event: IrBookingCancellationCustomEvent<boolean>) => void;
        "property_id"?: number;
    }
    interface IrBookingCard {
        "aff"?: boolean;
        "booking"?: Booking;
        "onOptionClicked"?: (event: IrBookingCardCustomEvent<{ tag: string; id: number }>) => void;
    }
    interface IrBookingCode {
        "onCloseDialog"?: (event: IrBookingCodeCustomEvent<null>) => void;
        "onResetBooking"?: (event: IrBookingCodeCustomEvent<string>) => void;
    }
    interface IrBookingDetails {
        "errors"?: string;
        "onPrepaymentChange"?: (event: IrBookingDetailsCustomEvent<number>) => void;
    }
    interface IrBookingDetailsView {
        "booking"?: Booking | null;
        "onBl_routing"?: (event: IrBookingDetailsViewCustomEvent<{
    route: 'booking' | 'booking-details';
    params?: unknown;
  }>) => void;
    }
    interface IrBookingHeader {
        "activeLink"?: 'single_booking' | 'all_booking';
        "bookingNumber"?: number | null;
        "mode"?: 'single' | 'multi';
        "onLinkChanged"?: (event: IrBookingHeaderCustomEvent<'single_booking' | 'all_booking'>) => void;
    }
    interface IrBookingListing {
        "aName"?: string;
        "aff"?: string;
        "baseUrl"?: string;
        "be"?: boolean;
        "footerShown"?: boolean;
        "headerShown"?: boolean;
        "hideGoogleSignIn"?: boolean;
        "language"?: string;
        "maxPages"?: number;
        "perma_link"?: string;
        "propertyid"?: number;
        "showAllBookings"?: boolean;
        "startScreen"?: { screen: 'bookings' | 'booking-details'; params: unknown };
        "version"?: string;
    }
    interface IrBookingOverview {
        "aff"?: boolean;
        "be"?: boolean;
        "language"?: string;
        "maxPages"?: number;
        "onBl_routing"?: (event: IrBookingOverviewCustomEvent<{
    route: 'booking' | 'booking-details';
    params?: unknown;
  }>) => void;
        "propertyid"?: number;
        "showAllBookings"?: boolean;
    }
    interface IrBookingPage {
        "adultCount"?: string;
        "ages"?: string;
        "childrenCount"?: string;
        "fromDate"?: string;
        "onRouting"?: (event: IrBookingPageCustomEvent<pages>) => void;
        "toDate"?: string;
    }
    interface IrBookingSummary {
        "error"?: CheckoutErrors;
        "isBookingConfirmed"?: boolean;
        "onBookingClicked"?: (event: IrBookingSummaryCustomEvent<null>) => void;
        "onOpenPrivacyPolicy"?: (event: IrBookingSummaryCustomEvent<null>) => void;
        "onRouting"?: (event: IrBookingSummaryCustomEvent<pages>) => void;
        "prepaymentAmount"?: any;
    }
    interface IrButton {
        "buttonClassName"?: string;
        "buttonId"?: string;
        "buttonStyles"?: Partial<CSSStyleDeclaration>;
        "disabled"?: boolean;
        "haveLeftIcon"?: boolean;
        "haveRightIcon"?: boolean;
        "iconHeight"?: number;
        "iconName"?: TIcons;
        "iconWidth"?: number;
        "isLoading"?: boolean;
        "label"?: string;
        "name"?: string;
        "onButtonClick"?: (event: IrButtonCustomEvent<MouseEvent>) => void;
        "removeIconClassName"?: boolean;
        "size"?: 'sm' | 'md' | 'lg' | 'pill';
        "svgClassName"?: string;
        "type"?: 'button' | 'submit' | 'reset' | 'menu';
        "variants"?: 'default' | 'outline' | 'secondary' | 'destructive' | 'ghost' | 'link' | 'icon' | 'ghost-primary' | 'outline-primary' | 'icon-primary';
    }
    interface IrCalendar {
        "date"?: Date;
        "dateModifiers"?: IDateModifiers;
        "fromDate"?: Date | null;
        "locale"?: Locale;
        "maxDate"?: Date;
        "maxSpanDays"?: number;
        "minDate"?: Date;
        "onDateChange"?: (event: IrCalendarCustomEvent<Date>) => void;
        "showPrice"?: boolean;
        "toDate"?: Date | null;
    }
    interface IrCarousel {
        "activeIndex"?: number;
        "carouselClasses"?: string;
        "enableCarouselSwipe"?: boolean;
        "onCarouselImageClicked"?: (event: IrCarouselCustomEvent<null>) => void;
        "onCarouselImageIndexChange"?: (event: IrCarouselCustomEvent<number>) => void;
        "slides"?: TCarouselSlides[];
        "styles"?: Partial<CSSStyleDeclaration>;
    }
    interface IrCheckbox {
        "checkboxId"?: string;
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "name"?: string;
        "onCheckChange"?: (event: IrCheckboxCustomEvent<boolean>) => void;
    }
    interface IrCheckoutPage {
        "onRouting"?: (event: IrCheckoutPageCustomEvent<pages>) => void;
    }
    interface IrCheckoutSkeleton {
    }
    interface IrCouponDialog {
        "onResetBooking"?: (event: IrCouponDialogCustomEvent<string>) => void;
    }
    interface IrCreditCardInput {
        "onCreditCardChange"?: (event: IrCreditCardInputCustomEvent<{ value: string; cardType: '' | 'AMEX' | 'VISA' | 'Mastercard' }>) => void;
        "value"?: string;
    }
    interface IrDatePopup {
        "dates"?: { start: Date | null; end: Date | null };
        "onDateChange"?: (event: IrDatePopupCustomEvent<{ start: Date | null; end: Date | null }>) => void;
    }
    interface IrDateRange {
        "dateModifiers"?: IDateModifiers;
        "fromDate"?: Date | null;
        "locale"?: Locale;
        "maxDate"?: Date;
        "maxSpanDays"?: number;
        "minDate"?: Date;
        "onDateChange"?: (event: IrDateRangeCustomEvent<{ start: Date | null; end: Date | null }>) => void;
        "showPrice"?: boolean;
        "toDate"?: Date | null;
    }
    interface IrDialog {
        "closeButton"?: boolean;
        "onOpenChange"?: (event: IrDialogCustomEvent<boolean>) => void;
    }
    interface IrDrawer {
        "contained"?: boolean;
        "label"?: string;
        "noHeader"?: boolean;
        /**
          * Emitted after the drawer closes and all transitions are complete.
         */
        "onSix-drawer-after-hide"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted after the drawer opens and all transitions are complete.
         */
        "onSix-drawer-after-show"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted when the drawer closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-drawer-hide"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted when the drawer opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the drawer, such as an input or button.
         */
        "onSix-drawer-initial-focus"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the drawer from closing.
         */
        "onSix-drawer-overlay-dismiss"?: (event: IrDrawerCustomEvent<null>) => void;
        "onSix-drawer-show"?: (event: IrDrawerCustomEvent<null>) => void;
        "open"?: boolean;
        "placement"?: 'top' | 'right' | 'bottom' | 'left';
    }
    interface IrFacilities {
    }
    interface IrFooter {
        "onOpenPrivacyPolicy"?: (event: IrFooterCustomEvent<null>) => void;
        "version"?: string;
    }
    interface IrGallery {
        "carouselClasses"?: string;
        "carouselStyles"?: Partial<CSSStyleDeclaration>;
        "disableCarouselClick"?: boolean;
        "enableCarouselSwipe"?: boolean;
        "images"?: { url: string; alt: string }[];
        "maxLength"?: number;
        "onOpenGallery"?: (event: IrGalleryCustomEvent<number>) => void;
        "totalImages"?: number;
    }
    interface IrGoogleMaps {
    }
    interface IrGuestCounter {
        "adults"?: number;
        "child"?: number;
        "childMaxAge"?: number;
        "error"?: boolean;
        "maxAdultCount"?: number;
        "maxChildrenCount"?: number;
        "minAdultCount"?: number;
        "minChildrenCount"?: number;
        "onCloseGuestCounter"?: (event: IrGuestCounterCustomEvent<any>) => void;
        "onUpdateCounts"?: (event: IrGuestCounterCustomEvent<any>) => void;
    }
    interface IrHomeLoader {
    }
    interface IrIcons {
        "height"?: number;
        "name"?: TIcons;
        "removeClassName"?: boolean;
        "svgClassName"?: string;
        "width"?: number;
    }
    interface IrInput {
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "class"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "inputId"?: string;
        "inputStyles"?: Partial<CSSStyleDeclaration>;
        "inputid"?: string;
        "label"?: string;
        "labelBackground"?: string;
        "leftIcon"?: boolean;
        "mask"?: Record<string, unknown>;
        "max"?: string | number;
        "maxlength"?: number;
        "min"?: string | number;
        "mode"?: 'double-line' | 'default';
        "multiple"?: boolean;
        "name"?: string;
        "onInputBlur"?: (event: IrInputCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: IrInputCustomEvent<FocusEvent>) => void;
        "onTextChanged"?: (event: IrInputCustomEvent<string>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "rightIcon"?: boolean;
        "size"?: number;
        "step"?: string | number;
        "tooltip"?: string;
        "type"?: | 'button'
    | 'checkbox'
    | 'color'
    | 'date'
    | 'datetime-local'
    | 'email'
    | 'file'
    | 'hidden'
    | 'image'
    | 'month'
    | 'number'
    | 'password'
    | 'radio'
    | 'range'
    | 'reset'
    | 'search'
    | 'submit'
    | 'tel'
    | 'text'
    | 'time'
    | 'url'
    | 'week';
        "value"?: string;
    }
    interface IrInterceptor {
        "handledEndpoints"?: any[];
    }
    interface IrInvoice {
        "aName"?: string;
        "baseUrl"?: string;
        "be"?: boolean;
        "bookingNbr"?: string;
        "email"?: string;
        "footerShown"?: boolean;
        "headerMessageShown"?: boolean;
        "headerShown"?: boolean;
        "isConfermation"?: boolean;
        "language"?: string;
        "locationShown"?: boolean;
        "perma_link"?: string;
        "propertyId"?: number;
        "status"?: 0 | 1;
        "version"?: string;
    }
    interface IrLanguagePicker {
        "currencies"?: ICurrency[];
        "languages"?: IExposedLanguages[];
        "onCloseDialog"?: (event: IrLanguagePickerCustomEvent<null>) => void;
        "onLanguageChanged"?: (event: IrLanguagePickerCustomEvent<string>) => void;
        "onResetBooking"?: (event: IrLanguagePickerCustomEvent<null>) => void;
    }
    interface IrLoyalty {
        "onResetBooking"?: (event: IrLoyaltyCustomEvent<string>) => void;
    }
    interface IrMenu {
        "data"?: IItems[];
        "menuItem"?: string;
        "onMenuItemClick"?: (event: IrMenuCustomEvent<string | number>) => void;
    }
    interface IrModal {
        "element"?: HTMLElement;
        "onAuthStatus"?: (event: IrModalCustomEvent<{
    state: 'success' | 'failed';
    token: string;
    payload: {
      method: 'direct' | 'google';
      email?: string;
      booking_nbr?: string;
    };
  }>) => void;
        "onOpenChange"?: (event: IrModalCustomEvent<boolean>) => void;
    }
    interface IrNav {
        "currencies"?: ICurrency[];
        "isBookingListing"?: boolean;
        "languages"?: IExposedLanguages[];
        "logo"?: string;
        "logoOnly"?: boolean;
        "menuShown"?: boolean;
        "onRouting"?: (event: IrNavCustomEvent<pages>) => void;
        "onScreenChanged"?: (event: IrNavCustomEvent<pages>) => void;
        "onSignOut"?: (event: IrNavCustomEvent<null>) => void;
        "showBookingCode"?: boolean;
        "showCurrency"?: boolean;
        "website"?: string;
    }
    interface IrPagination {
        "current"?: number;
        "minPageShown"?: number;
        "onPageChange"?: (event: IrPaginationCustomEvent<number>) => void;
        "total"?: number;
    }
    interface IrPaymentView {
        "errors"?: Record<string, ZodIssue>;
        "prepaymentAmount"?: number;
    }
    interface IrPhoneInput {
        "country_code"?: number;
        "country_phone_prefix"?: string;
        "error"?: boolean;
        "mobile_number"?: string;
        "mode"?: 'prefix_only' | 'country_code_and_prefix';
        "onPhoneInputBlur"?: (event: IrPhoneInputCustomEvent<FocusEvent>) => void;
        "onPhoneInputFocus"?: (event: IrPhoneInputCustomEvent<FocusEvent>) => void;
        "onTextChange"?: (event: IrPhoneInputCustomEvent<{ phone_prefix: string; mobile: string }>) => void;
    }
    interface IrPickup {
        "errors"?: Record<string, ZodIssue>;
    }
    interface IrPopover {
        "active"?: boolean;
        "allowFlip"?: boolean;
        "autoAdjust"?: boolean;
        "onOpenChange"?: (event: IrPopoverCustomEvent<boolean>) => void;
        "outsideEvents"?: 'all' | 'none';
        "placement"?: Placement;
        "showCloseButton"?: boolean;
        "stopListeningForOutsideClicks"?: boolean;
        "trigger_label"?: string;
    }
    interface IrPortal {
        "offset"?: number;
        "reference"?: HTMLElement;
    }
    interface IrPrivacyPolicy {
        "hideTrigger"?: boolean;
        "label"?: string;
        "policyTriggerStyle"?: Partial<CSSStyleDeclaration>;
    }
    interface IrPropertyGallery {
        "display"?: 'grid' | 'default';
        "property_state"?: 'carousel' | 'gallery';
        "roomType"?: RoomType;
    }
    interface IrQuickAuth {
    }
    interface IrRadio {
        "checked"?: boolean;
        "onCheckChange"?: (event: IrRadioCustomEvent<boolean>) => void;
        "radioId"?: string;
    }
    interface IrRateplan {
        "display"?: 'grid' | 'default';
        "onAnimateBookingButton"?: (event: IrRateplanCustomEvent<null>) => void;
        "ratePlan"?: RatePlan;
        "roomTypeId"?: number;
        "roomTypeInventory"?: number;
        "visibleInventory"?: | IRatePlanSelection
    | {
        reserved: number;
        visibleInventory?: number;
        selected_variation: Variation;
      };
    }
    interface IrRoomTypeAmenities {
        "aminities"?: Amenity[];
        "roomType"?: RoomType;
    }
    interface IrRoomtype {
        "display"?: 'grid' | 'default';
        "roomtype"?: RoomType;
    }
    interface IrSelect {
        "addDummyOption"?: boolean;
        "containerStyle"?: string;
        "customStyles"?: string;
        "data"?: { id: string | number; value: string; disabled?: boolean; html?: boolean }[];
        "icon"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: IrSelectCustomEvent<string | number>) => void;
        "select_id"?: string;
        "value"?: string | number;
        "variant"?: 'double-line' | 'default';
    }
    interface IrSheet {
        "hideCloseButton"?: boolean;
        "onOpenChange"?: (event: IrSheetCustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface IrSignin {
        "enableSignUp"?: boolean;
        "onAuthFinish"?: (event: IrSigninCustomEvent<{
    state: 'success' | 'failed';
    token: string;
    payload: {
      method: 'direct' | 'google';
      email?: string;
      booking_nbr?: string;
    };
  }>) => void;
        "onNavigate"?: (event: IrSigninCustomEvent<TAuthNavigation>) => void;
        "onSignIn"?: (event: IrSigninCustomEvent<TSignInAuthTrigger>) => void;
    }
    interface IrSignup {
        "onNavigate"?: (event: IrSignupCustomEvent<TAuthNavigation>) => void;
        "onSignUp"?: (event: IrSignupCustomEvent<TSignUpAuthTrigger>) => void;
    }
    interface IrSkeleton {
        "customClasses"?: string;
        "styles"?: {
    [className: string]: boolean;
  };
    }
    interface IrSocialButton {
        "label"?: string;
        "onSocialButtonClick"?: (event: IrSocialButtonCustomEvent<MouseEvent>) => void;
    }
    interface IrSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "onCheckChange"?: (event: IrSwitchCustomEvent<boolean>) => void;
        "switchId"?: string;
    }
    interface IrTextarea {
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "class"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "inputId"?: string;
        "inputid"?: string;
        "label"?: string;
        "leftIcon"?: boolean;
        "max"?: string | number;
        "maxlength"?: number;
        "min"?: string | number;
        "multiple"?: boolean;
        "name"?: string;
        "onInputBlur"?: (event: IrTextareaCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: IrTextareaCustomEvent<FocusEvent>) => void;
        "onTextChanged"?: (event: IrTextareaCustomEvent<string>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "size"?: number;
        "step"?: string | number;
        "value"?: string;
    }
    interface IrTooltip {
        "label"?: string;
        "labelColors"?: 'default' | 'green' | 'red';
        "message"?: string;
        "onTooltipOpenChange"?: (event: IrTooltipCustomEvent<boolean>) => void;
        "open_behavior"?: 'hover' | 'click';
        "withHtml"?: boolean;
    }
    interface IrUserAvatar {
    }
    interface IrUserForm {
        "errors"?: Record<string, ZodIssue>;
        "onChangePageLoading"?: (event: IrUserFormCustomEvent<'remove' | 'add'>) => void;
    }
    interface IrUserProfile {
        "be"?: boolean;
        "user_data"?: TGuest;
    }
    interface IrWidget {
        "aff"?: string;
        "contentContainerStyle"?: TContainerStyle;
        "delay"?: number;
        "language"?: string;
        "p"?: string;
        "perma_link"?: string;
        "position"?: 'fixed' | 'block';
        "propertyId"?: number;
        "roomTypeId"?: string | null;
    }
    interface IntrinsicElements {
        "ir-accomodations": IrAccomodations;
        "ir-adult-child-counter": IrAdultChildCounter;
        "ir-alert-dialog": IrAlertDialog;
        "ir-auth": IrAuth;
        "ir-availability-header": IrAvailabilityHeader;
        "ir-badge": IrBadge;
        "ir-badge-group": IrBadgeGroup;
        "ir-banner": IrBanner;
        "ir-be": IrBe;
        "ir-booking-cancellation": IrBookingCancellation;
        "ir-booking-card": IrBookingCard;
        "ir-booking-code": IrBookingCode;
        "ir-booking-details": IrBookingDetails;
        "ir-booking-details-view": IrBookingDetailsView;
        "ir-booking-header": IrBookingHeader;
        "ir-booking-listing": IrBookingListing;
        "ir-booking-overview": IrBookingOverview;
        "ir-booking-page": IrBookingPage;
        "ir-booking-summary": IrBookingSummary;
        "ir-button": IrButton;
        "ir-calendar": IrCalendar;
        "ir-carousel": IrCarousel;
        "ir-checkbox": IrCheckbox;
        "ir-checkout-page": IrCheckoutPage;
        "ir-checkout-skeleton": IrCheckoutSkeleton;
        "ir-coupon-dialog": IrCouponDialog;
        "ir-credit-card-input": IrCreditCardInput;
        "ir-date-popup": IrDatePopup;
        "ir-date-range": IrDateRange;
        "ir-dialog": IrDialog;
        "ir-drawer": IrDrawer;
        "ir-facilities": IrFacilities;
        "ir-footer": IrFooter;
        "ir-gallery": IrGallery;
        "ir-google-maps": IrGoogleMaps;
        "ir-guest-counter": IrGuestCounter;
        "ir-home-loader": IrHomeLoader;
        "ir-icons": IrIcons;
        "ir-input": IrInput;
        "ir-interceptor": IrInterceptor;
        "ir-invoice": IrInvoice;
        "ir-language-picker": IrLanguagePicker;
        "ir-loyalty": IrLoyalty;
        "ir-menu": IrMenu;
        "ir-modal": IrModal;
        "ir-nav": IrNav;
        "ir-pagination": IrPagination;
        "ir-payment-view": IrPaymentView;
        "ir-phone-input": IrPhoneInput;
        "ir-pickup": IrPickup;
        "ir-popover": IrPopover;
        "ir-portal": IrPortal;
        "ir-privacy-policy": IrPrivacyPolicy;
        "ir-property-gallery": IrPropertyGallery;
        "ir-quick-auth": IrQuickAuth;
        "ir-radio": IrRadio;
        "ir-rateplan": IrRateplan;
        "ir-room-type-amenities": IrRoomTypeAmenities;
        "ir-roomtype": IrRoomtype;
        "ir-select": IrSelect;
        "ir-sheet": IrSheet;
        "ir-signin": IrSignin;
        "ir-signup": IrSignup;
        "ir-skeleton": IrSkeleton;
        "ir-social-button": IrSocialButton;
        "ir-switch": IrSwitch;
        "ir-textarea": IrTextarea;
        "ir-tooltip": IrTooltip;
        "ir-user-avatar": IrUserAvatar;
        "ir-user-form": IrUserForm;
        "ir-user-profile": IrUserProfile;
        "ir-widget": IrWidget;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ir-accomodations": LocalJSX.IrAccomodations & JSXBase.HTMLAttributes<HTMLIrAccomodationsElement>;
            "ir-adult-child-counter": LocalJSX.IrAdultChildCounter & JSXBase.HTMLAttributes<HTMLIrAdultChildCounterElement>;
            "ir-alert-dialog": LocalJSX.IrAlertDialog & JSXBase.HTMLAttributes<HTMLIrAlertDialogElement>;
            "ir-auth": LocalJSX.IrAuth & JSXBase.HTMLAttributes<HTMLIrAuthElement>;
            "ir-availability-header": LocalJSX.IrAvailabilityHeader & JSXBase.HTMLAttributes<HTMLIrAvailabilityHeaderElement>;
            "ir-badge": LocalJSX.IrBadge & JSXBase.HTMLAttributes<HTMLIrBadgeElement>;
            "ir-badge-group": LocalJSX.IrBadgeGroup & JSXBase.HTMLAttributes<HTMLIrBadgeGroupElement>;
            "ir-banner": LocalJSX.IrBanner & JSXBase.HTMLAttributes<HTMLIrBannerElement>;
            "ir-be": LocalJSX.IrBe & JSXBase.HTMLAttributes<HTMLIrBeElement>;
            "ir-booking-cancellation": LocalJSX.IrBookingCancellation & JSXBase.HTMLAttributes<HTMLIrBookingCancellationElement>;
            "ir-booking-card": LocalJSX.IrBookingCard & JSXBase.HTMLAttributes<HTMLIrBookingCardElement>;
            "ir-booking-code": LocalJSX.IrBookingCode & JSXBase.HTMLAttributes<HTMLIrBookingCodeElement>;
            "ir-booking-details": LocalJSX.IrBookingDetails & JSXBase.HTMLAttributes<HTMLIrBookingDetailsElement>;
            "ir-booking-details-view": LocalJSX.IrBookingDetailsView & JSXBase.HTMLAttributes<HTMLIrBookingDetailsViewElement>;
            "ir-booking-header": LocalJSX.IrBookingHeader & JSXBase.HTMLAttributes<HTMLIrBookingHeaderElement>;
            "ir-booking-listing": LocalJSX.IrBookingListing & JSXBase.HTMLAttributes<HTMLIrBookingListingElement>;
            "ir-booking-overview": LocalJSX.IrBookingOverview & JSXBase.HTMLAttributes<HTMLIrBookingOverviewElement>;
            "ir-booking-page": LocalJSX.IrBookingPage & JSXBase.HTMLAttributes<HTMLIrBookingPageElement>;
            "ir-booking-summary": LocalJSX.IrBookingSummary & JSXBase.HTMLAttributes<HTMLIrBookingSummaryElement>;
            "ir-button": LocalJSX.IrButton & JSXBase.HTMLAttributes<HTMLIrButtonElement>;
            "ir-calendar": LocalJSX.IrCalendar & JSXBase.HTMLAttributes<HTMLIrCalendarElement>;
            "ir-carousel": LocalJSX.IrCarousel & JSXBase.HTMLAttributes<HTMLIrCarouselElement>;
            "ir-checkbox": LocalJSX.IrCheckbox & JSXBase.HTMLAttributes<HTMLIrCheckboxElement>;
            "ir-checkout-page": LocalJSX.IrCheckoutPage & JSXBase.HTMLAttributes<HTMLIrCheckoutPageElement>;
            "ir-checkout-skeleton": LocalJSX.IrCheckoutSkeleton & JSXBase.HTMLAttributes<HTMLIrCheckoutSkeletonElement>;
            "ir-coupon-dialog": LocalJSX.IrCouponDialog & JSXBase.HTMLAttributes<HTMLIrCouponDialogElement>;
            "ir-credit-card-input": LocalJSX.IrCreditCardInput & JSXBase.HTMLAttributes<HTMLIrCreditCardInputElement>;
            "ir-date-popup": LocalJSX.IrDatePopup & JSXBase.HTMLAttributes<HTMLIrDatePopupElement>;
            "ir-date-range": LocalJSX.IrDateRange & JSXBase.HTMLAttributes<HTMLIrDateRangeElement>;
            "ir-dialog": LocalJSX.IrDialog & JSXBase.HTMLAttributes<HTMLIrDialogElement>;
            "ir-drawer": LocalJSX.IrDrawer & JSXBase.HTMLAttributes<HTMLIrDrawerElement>;
            "ir-facilities": LocalJSX.IrFacilities & JSXBase.HTMLAttributes<HTMLIrFacilitiesElement>;
            "ir-footer": LocalJSX.IrFooter & JSXBase.HTMLAttributes<HTMLIrFooterElement>;
            "ir-gallery": LocalJSX.IrGallery & JSXBase.HTMLAttributes<HTMLIrGalleryElement>;
            "ir-google-maps": LocalJSX.IrGoogleMaps & JSXBase.HTMLAttributes<HTMLIrGoogleMapsElement>;
            "ir-guest-counter": LocalJSX.IrGuestCounter & JSXBase.HTMLAttributes<HTMLIrGuestCounterElement>;
            "ir-home-loader": LocalJSX.IrHomeLoader & JSXBase.HTMLAttributes<HTMLIrHomeLoaderElement>;
            "ir-icons": LocalJSX.IrIcons & JSXBase.HTMLAttributes<HTMLIrIconsElement>;
            "ir-input": LocalJSX.IrInput & JSXBase.HTMLAttributes<HTMLIrInputElement>;
            "ir-interceptor": LocalJSX.IrInterceptor & JSXBase.HTMLAttributes<HTMLIrInterceptorElement>;
            "ir-invoice": LocalJSX.IrInvoice & JSXBase.HTMLAttributes<HTMLIrInvoiceElement>;
            "ir-language-picker": LocalJSX.IrLanguagePicker & JSXBase.HTMLAttributes<HTMLIrLanguagePickerElement>;
            "ir-loyalty": LocalJSX.IrLoyalty & JSXBase.HTMLAttributes<HTMLIrLoyaltyElement>;
            "ir-menu": LocalJSX.IrMenu & JSXBase.HTMLAttributes<HTMLIrMenuElement>;
            "ir-modal": LocalJSX.IrModal & JSXBase.HTMLAttributes<HTMLIrModalElement>;
            "ir-nav": LocalJSX.IrNav & JSXBase.HTMLAttributes<HTMLIrNavElement>;
            "ir-pagination": LocalJSX.IrPagination & JSXBase.HTMLAttributes<HTMLIrPaginationElement>;
            "ir-payment-view": LocalJSX.IrPaymentView & JSXBase.HTMLAttributes<HTMLIrPaymentViewElement>;
            "ir-phone-input": LocalJSX.IrPhoneInput & JSXBase.HTMLAttributes<HTMLIrPhoneInputElement>;
            "ir-pickup": LocalJSX.IrPickup & JSXBase.HTMLAttributes<HTMLIrPickupElement>;
            "ir-popover": LocalJSX.IrPopover & JSXBase.HTMLAttributes<HTMLIrPopoverElement>;
            "ir-portal": LocalJSX.IrPortal & JSXBase.HTMLAttributes<HTMLIrPortalElement>;
            "ir-privacy-policy": LocalJSX.IrPrivacyPolicy & JSXBase.HTMLAttributes<HTMLIrPrivacyPolicyElement>;
            "ir-property-gallery": LocalJSX.IrPropertyGallery & JSXBase.HTMLAttributes<HTMLIrPropertyGalleryElement>;
            "ir-quick-auth": LocalJSX.IrQuickAuth & JSXBase.HTMLAttributes<HTMLIrQuickAuthElement>;
            "ir-radio": LocalJSX.IrRadio & JSXBase.HTMLAttributes<HTMLIrRadioElement>;
            "ir-rateplan": LocalJSX.IrRateplan & JSXBase.HTMLAttributes<HTMLIrRateplanElement>;
            "ir-room-type-amenities": LocalJSX.IrRoomTypeAmenities & JSXBase.HTMLAttributes<HTMLIrRoomTypeAmenitiesElement>;
            "ir-roomtype": LocalJSX.IrRoomtype & JSXBase.HTMLAttributes<HTMLIrRoomtypeElement>;
            "ir-select": LocalJSX.IrSelect & JSXBase.HTMLAttributes<HTMLIrSelectElement>;
            "ir-sheet": LocalJSX.IrSheet & JSXBase.HTMLAttributes<HTMLIrSheetElement>;
            "ir-signin": LocalJSX.IrSignin & JSXBase.HTMLAttributes<HTMLIrSigninElement>;
            "ir-signup": LocalJSX.IrSignup & JSXBase.HTMLAttributes<HTMLIrSignupElement>;
            "ir-skeleton": LocalJSX.IrSkeleton & JSXBase.HTMLAttributes<HTMLIrSkeletonElement>;
            "ir-social-button": LocalJSX.IrSocialButton & JSXBase.HTMLAttributes<HTMLIrSocialButtonElement>;
            "ir-switch": LocalJSX.IrSwitch & JSXBase.HTMLAttributes<HTMLIrSwitchElement>;
            "ir-textarea": LocalJSX.IrTextarea & JSXBase.HTMLAttributes<HTMLIrTextareaElement>;
            "ir-tooltip": LocalJSX.IrTooltip & JSXBase.HTMLAttributes<HTMLIrTooltipElement>;
            "ir-user-avatar": LocalJSX.IrUserAvatar & JSXBase.HTMLAttributes<HTMLIrUserAvatarElement>;
            "ir-user-form": LocalJSX.IrUserForm & JSXBase.HTMLAttributes<HTMLIrUserFormElement>;
            "ir-user-profile": LocalJSX.IrUserProfile & JSXBase.HTMLAttributes<HTMLIrUserProfileElement>;
            "ir-widget": LocalJSX.IrWidget & JSXBase.HTMLAttributes<HTMLIrWidgetElement>;
        }
    }
}
